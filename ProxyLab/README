This is a course project from course: Introduction to Computer System

1 Introduction
A proxy server is a computer program that acts as an intermediary between clients making requests to access resources and the servers that satisfy those requests by serving content. A web proxy is a special type of proxy server whose clients are typically web browsers and whose servers are the same servers that browsers use. When a web browser uses a proxy, it contacts the proxy instead of communicating directly with the web server; the proxy forwards its client’s request to the web server, reads the server’s response, then forwards the response to the client.
Proxies are useful for many purposes. Sometimes proxies are used in firewalls, so that browsers behind a firewall can only contact a server beyond the firewall via the proxy. A proxy may also perform translations on pages, for example, to make them viewable on web-enabled phones. Importantly, proxies are used as anonymizers: by stripping requests of all identifying information, a proxy can make the browser anonymous to web servers. Proxies can even be used to cache web objects by storing local copies of objects from servers then responding to future requests by reading them out of its cache rather than by communicating again with remote servers.


2 Objective
The objective will be writing a simple HTTP proxy that caches web objects. The Proxy can support HTTP GET operation and handle multiple requests at one time. This is more like a backend thing.

3 Technical Details
Used POSIX Thread to enable concurrency and Semaphore to ensure thread safety. For the cache structure, I used a linked list to meet the project objective. This could work well for small cache but will be super slow for larger system. Therefore, if I will work on it further, I will use a hashmap combining double linkedlist to implement the LRU cache.

4. Details about my work
proxy.c  proxy.h  cache.c cache.h These files are implemented by myself and the others are provided by the instructor. This program act as a basic proxy which can handle muiltiple GET requests.




BELOW IS THE DESCRIPTION OF THE FILES
####################################################################
# CS:APP Proxy Lab
#
# Student Source Files
#
####################################################################

This directory contains the files you will need for the CS:APP Proxy
Lab.

proxy.c
csapp.h
csapp.c
open_clientfd_r.c
    These are starter files.  csapp.c and csapp.h are described in
    your textbook. open_clientfd_r.c is a thread-safe version of 
    open_clientfd() based on the getaddrinfo() system call. 

    You may make any changes you like to these files.  And you may
    create and handin any additional files you like.

    Please use `port-for-user.pl' or 'free-port.sh' to generate
    unused ports for your proxy or tiny server. 

Makefile
    This is the makefile that builds the proxy program.  Type "make"
    to build your solution, or "make clean" followed by "make" for a
    fresh build. 

    Type "make handin" to create the tarfile that you will be handing
    in. You can modify it any way you like. Autolab will use your
    Makefile to build your proxy from source.

port-for-user.pl
    Generates a random port for a particular user
    usage: ./port-for-user.pl <AndrewID>

free-port.sh
    Handy script that identifies an unused TCP port that you can use
    for your proxy or tiny. 
    usage: ./free-port.sh

driver.sh
    The autograder for Basic, Concurrency, and Cache.        
    usage: ./driver.sh

nop-server.py
     helper for the autograder.         

tiny
    Tiny Web server from the CS:APP text
